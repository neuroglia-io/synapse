﻿@*
    Copyright © 2024-Present The Synapse Authors

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*@

@namespace Synapse.Dashboard.Components
@using Synapse.Dashboard.Components.WorkflowInstanceDetailsStateManagement
@inherits StatefulComponent<WorkflowInstanceDetails, WorkflowInstanceDetailsStore, WorkflowInstanceDetailsState>
@inject NavigationManager Navigation

<div class="card mb-3">
    <h5 class="card-header">Metadata</h5>
    <div class="card-body">
        <table class="table table-striped mb-3">
            <tbody>
                <tr>
                    <td>Name</td>
                    <td>@_workflowInstance?.GetName()</td>
                </tr>
                <tr>
                    <td>Namespace</td>
                    <td>@_workflowInstance?.GetNamespace()</td>
                </tr>
                <tr>
                    <td>Created At</td>
                    <td>@_workflowInstance?.Metadata.CreationTimestamp?.ToString("R")</td>
                </tr>
                <tr>
                    <td>Generation</td>
                    <td>@_workflowInstance?.Metadata.Generation</td>
                </tr>
                <tr>
                    <td>Labels</td>
                    <td>
                        @if (_workflowInstance?.Metadata.Labels?.Any() == true)
                        {
                            foreach (var label in _workflowInstance.Metadata.Labels)
                            {
                                <span class="badge bg-primary text-dark m-1">@label.Key: @label.Value</span>
                            }
                        }
                    </td>
                </tr>
            </tbody>
        </table>
    </div>
</div>

<div class="card mb-3">
    <h5 class="card-header">Spec</h5>
    <div class="card-body">
        <table class="table table-striped mb-3">
            <tbody>
                <tr>
                    <td>Definition</td>
                    <td><a href="#" @onclick="OnNavigateToDefinition">@_workflowInstance!.Definition.ToString()</a></td>
                </tr>
            </tbody>
        </table>
    </div>
</div>

<div class="card mb-3">
    <h5 class="card-header">Status</h5>
    <div class="card-body">
        <table class="table table-striped mb-3">
            <tbody>
                <tr>
                    <td>Phase</td>
                    <td><span class="badge rounded-pill badge rounded-pill border @GetStatusClass()">@_workflowInstance.Status?.Phase</span></td>
                </tr>
                <tr>
                    <td colspan="2">
                        <ReferenceDetails Label="Context Data" Reference="@_workflowInstance?.Status?.ContextReference"></ReferenceDetails>
                    </td>
                </tr>
                <tr>
                    <td colspan="2">
                        <ReferenceDetails Label="Output" Reference="@_workflowInstance?.Status?.OutputReference"></ReferenceDetails>
                    </td>
                </tr>
                <tr>
                    <td>Error</td>
                    <td>@_workflowInstance?.Status?.Error</td>
                </tr>
            </tbody>
        </table>
    </div>
</div>


@code {

    /// <summary>
    /// Gets/sets the workflow instance to display details about
    /// </summary>
    [Parameter] public WorkflowInstance? WorkflowInstance { get; set; }

    private WorkflowInstance? _workflowInstance;

    string GetStatusClass()
    {
        return this._workflowInstance?.Status?.Phase switch
        {
            WorkflowInstanceStatusPhase.Pending => "border-secondary text-secondary",
            WorkflowInstanceStatusPhase.Running => "border-primary text-primary",
            WorkflowInstanceStatusPhase.Faulted => "border-danger text-danger",
            WorkflowInstanceStatusPhase.Cancelled => "border-warning text-warning",
            WorkflowInstanceStatusPhase.Completed => "border-success text-success",
            _ => "border-secondary text-secondary"
        };
    }

    void OnNavigateToDefinition()
    {
        if (this._workflowInstance == null) return;
        this.Navigation.NavigateTo($"/workflows/{this._workflowInstance.Spec.Definition.Namespace}/{this._workflowInstance.Spec.Definition.Name}/{this._workflowInstance.Spec.Definition.Version}");
    }

    /// <inheritdoc/>
    protected override Task OnParametersSetAsync()
    {
        if (this._workflowInstance != this.WorkflowInstance) this._workflowInstance = this.WorkflowInstance;
        return base.OnParametersSetAsync();
    }

}
