@page "/workflow-instances"
@attribute [Authorize]
@namespace Synapse.Dashboard.Pages.WorkflowInstances.List
@inherits NamespacedResourceManagementComponent<View, WorkflowInstanceListComponentStore, WorkflowInstanceListState, WorkflowInstance>

<ApplicationTitle>Workflow Instances</ApplicationTitle>

<div class="table-container">
    @if (Loading)
    {
        <div class="loading">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    <div class="d-flex flex-row justify-content-between align-items-center">
        <h4>Workflow Instances</h4>
        <span>@(Resources?.Count ?? 0) items</span>
        <div class="d-flex">
            <select class="form-select m-2" @onchange="OnWorkflowChanged">
                <option value="">All workflows</option>
                @if (Workflows != null && Workflows.Count > 0)
                {
                    foreach (var workflowResource in Workflows)
                    {
                        <option value="@workflowResource.GetQualifiedName()">@workflowResource.GetQualifiedName()</option>
                    }
                }
            </select>
            <select class="form-select m-2" @onchange="OnNamespaceChanged">
                <option value="">All namespaces</option>
                @if (Namespaces != null && Namespaces.Count > 0)
                {
                    foreach (var namespaceResource in Namespaces)
                    {
                        <option value="@namespaceResource.GetName()">@namespaceResource.GetName()</option>
                    }
                }
            </select>
            <input type="search" class="form-control rounded my-2 me-2" placeholder="Search" value="@SearchTerm" @oninput="OnSearchInput" />
        </div>
    </div>
    <table class="table table-striped table-hover">
        <thead>
            <tr>
                <th class="sticky-header text-start">Name</th>
                <th class="sticky-header text-start">Namespace</th>
                <th class="sticky-header text-center">Definition</th>
                <th class="sticky-header text-center">Status</th>
                <th class="sticky-header text-center">Created At</th>
                <th class="sticky-header text-center">Started At</th>
                <th class="sticky-header text-center">Ended At</th>
                <th class="sticky-header text-center">Duration</th>
                <th class="sticky-header text-center">Operator</th>
                <th class="sticky-header text-end">
                    <Button Outline="true" Size="Size.Small" Color="ButtonColor.Primary" @onclick="async _ => await OnShowResourceEditorAsync()"><Icon Name="IconName.Plus" /></Button>
                </th>
            </tr>
        </thead>
        <tbody>
            @if (Resources != null && Resources.Any())
            {
                <Virtualize Context="resource" Items="@Resources">
                    <tr @onclick="async _ => await OnShowResourceDetailsAsync(resource)" class="cursor-pointer">
                        <td class="text-start">@resource.Metadata.Name</td>
                        <td class="text-start"><a href="#" @onclick:preventDefault="true" @onclick:stopPropagation="true">@resource.Metadata.Namespace</a></td>
                        <td class="text-center"><a href="#" @onclick:preventDefault="true" @onclick:stopPropagation="true">@resource.Spec.Definition.ToString()</a></td>
                        <td class="text-center"><span class="badge rounded-pill badge rounded-pill border @GetStatusClass(resource)">@(resource.Status?.Phase ?? WorkflowInstanceStatusPhase.Pending)</span></td>
                        <td class="text-center">@resource.Metadata.CreationTimestamp.ToString()</td>
                        <td class="text-center">@(resource.Status?.StartedAt.ToString() ?? "-")</td>
                        <td class="text-center">@(resource.Status?.EndedAt.ToString() ?? "-")</td>
                        <td class="text-center">@(resource.Status?.StartedAt.HasValue == true && resource.Status?.EndedAt.HasValue == true ? resource.Status.EndedAt.Value.Subtract(resource.Status.StartedAt.Value).ToString("hh\\:mm\\:ss\\.fff") : "-")</td>
                        <td class="text-center">
                            @if (resource.Metadata.Labels?.TryGetValue(SynapseDefaults.Resources.Labels.Operator, out var operatorName) == true && !string.IsNullOrWhiteSpace(operatorName))
                            {
                                <a href="#" @onclick:preventDefault="true" @onclick:stopPropagation="true">@operatorName</a>
                            }
                            else
                            {
                                <span>-</span>
                            }
                        </td>
                        <td class="text-end">
                            <div class="dropdown">
                                <button class="btn btn-sm btn-dark" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false" title="" @onclick:stopPropagation="true"><i class="bi bi-three-dots-vertical"></i></button>
                                <ul class="dropdown-menu">
                                    <li><a class="dropdown-item" href="#" @onclick="async _ => await OnDeleteResourceAsync(resource)" @onclick:preventDefault="true" @onclick:stopPropagation="true">View</a></li>
                                    <li><a class="dropdown-item" href="#" @onclick="async _ => await OnDeleteResourceAsync(resource)" @onclick:preventDefault="true" @onclick:stopPropagation="true">Delete</a></li>
                                </ul>
                            </div>
                        </td>
                    </tr>
                </Virtualize>
            }
        </tbody>
    </table>
</div>

<Button Outline="true" Color="ButtonColor.Primary" @onclick="async _ => await OnShowResourceEditorAsync()"><Icon Name="IconName.Plus" /></Button>

<Offcanvas @ref="DetailsOffCanvas" Size="OffcanvasSize.Large" UseStaticBackdrop="false" BodyCssClass="d-flex flex-column" />

<Offcanvas @ref="EditorOffCanvas" Size="OffcanvasSize.Large" UseStaticBackdrop="false" BodyCssClass="d-flex flex-column" />

<ConfirmDialog @ref="Dialog" />

@code{

    /// <summary>
    /// Gets the list of available <see cref="Workflow"/>s
    /// </summary>
    protected EquatableList<Workflow>? Workflows { get; set; }

    /// <inheritdoc/>
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        this.Store.Workflows.Subscribe(workflows => this.OnStateChanged(cmp => cmp.Workflows = workflows), token: this.CancellationTokenSource.Token);
        await this.Store.ListWorkflowsAsync().ConfigureAwait(false);
    }

    /// <summary>
    /// Handles changes of the workflow selector
    /// </summary>
    /// <param name="e"></param>
    protected void OnWorkflowChanged(ChangeEventArgs e)
    {
        var workflowQualifiedName = e.Value?.ToString();
        Console.WriteLine("OnWorkflowChanged(ChangeEventArgs e): " + (workflowQualifiedName ?? "empty"));
        if (string.IsNullOrWhiteSpace(workflowQualifiedName))
        {
            this.Store.RemoveLabelSelector(SynapseDefaults.Resources.Labels.Workflow);
        }
        else
        {
            this.Store.AddLabelSelector(new(SynapseDefaults.Resources.Labels.Workflow, LabelSelectionOperator.Equals, workflowQualifiedName));
        }
    }

    string GetStatusClass(WorkflowInstance instance)
    {
        return instance.Status?.Phase switch
        {
            WorkflowInstanceStatusPhase.Pending => "border-secondary text-secondary",
            WorkflowInstanceStatusPhase.Running => "border-primary text-primary",
            WorkflowInstanceStatusPhase.Faulted => "border-danger text-danger",
            WorkflowInstanceStatusPhase.Cancelled => "border-warning text-warning",
            WorkflowInstanceStatusPhase.Completed => "border-success text-success",
            _ => "border-secondary text-secondary"
        };
    }

}