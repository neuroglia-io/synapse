@namespace Synapse.Dashboard.Pages.WorkflowInstances.List
@page "/workflow-instances"
@inherits NamespacedResourceManagementComponent<WorkflowInstance>

<ApplicationTitle>Workflow Instances</ApplicationTitle>

<div class="table-container">
    @if (Loading)
    {
        <div class="loading">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    <table class="table table-striped table-hover">
        <thead>
            <tr>
                <th class="sticky-header text-start">Name</th>
                <th class="sticky-header text-start">Namespace</th>
                <th class="sticky-header text-center">Definition</th>
                <th class="sticky-header text-center">Status</th>
                <th class="sticky-header text-center">Created At</th>
                <th class="sticky-header text-center">Started At</th>
                <th class="sticky-header text-center">Ended At</th>
                <th class="sticky-header text-center">Duration</th>
                <th class="sticky-header text-center">Operator</th>
                <th class="sticky-header text-end">
                    <Button Outline="true" Size="Size.Small" Color="ButtonColor.Primary" @onclick="async _ => await OnShowResourceEditorAsync()"><Icon Name="IconName.Plus" /></Button>
                </th>
            </tr>
        </thead>
        <tbody>
            @if (Resources != null && Resources.Any())
            {
                <Virtualize Context="resource" Items="@Resources">
                    <tr @onclick="async _ => await OnShowResourceDetailsAsync(resource)" class="cursor-pointer">
                        <td class="text-start">@resource.Metadata.Name</td>
                        <td class="text-start"><a href="#" @onclick:preventDefault="true" @onclick:stopPropagation="true">@resource.Metadata.Namespace</a></td>
                        <td class="text-center"><a href="#" @onclick:preventDefault="true" @onclick:stopPropagation="true">@resource.Spec.Definition.ToString()</a></td>
                        <td class="text-center"><span class="badge rounded-pill badge rounded-pill border @GetStatusClass(resource)">@(resource.Status?.Phase ?? WorkflowInstanceStatusPhase.Pending)</span></td>
                        <td class="text-center">@resource.Metadata.CreationTimestamp.ToString()</td>
                        <td class="text-center">@(resource.Status?.StartedAt.ToString() ?? "-")</td>
                        <td class="text-center">@(resource.Status?.EndedAt.ToString() ?? "-")</td>
                        <td class="text-center">@(resource.Status?.StartedAt.HasValue == true && resource.Status?.EndedAt.HasValue == true ? resource.Status.EndedAt.Value.Subtract(resource.Status.StartedAt.Value).ToString("hh\\:mm\\:ss\\.fff") : "-")</td>
                        <td class="text-center">
                            @if (resource.Metadata.Labels?.TryGetValue(SynapseDefaults.Resources.Labels.Operator, out var operatorName) == true && !string.IsNullOrWhiteSpace(operatorName))
                            {
                                <a href="#" @onclick:preventDefault="true" @onclick:stopPropagation="true">@operatorName</a>
                            }
                            else
                            {
                                <span>-</span>
                            }
                        </td>
                        <td class="text-end">
                            <button class="btn btn-outline-primary btn-sm" title="Edit '@resource.Metadata.Name'" @onclick="async _ => await OnShowResourceEditorAsync(resource)" @onclick:preventDefault @onclick:stopPropagation><Icon Name="IconName.Pencil" /></button>
                            <button class="btn btn-outline-danger btn-sm" title="Delete '@resource.Metadata.Name'" @onclick="async _ => await OnDeleteResourceAsync(resource)" @onclick:preventDefault @onclick:stopPropagation><Icon Name="IconName.Trash" /></button>
                        </td>
                    </tr>
                </Virtualize>
            }
        </tbody>
    </table>
</div>

<Offcanvas @ref="DetailsOffCanvas" Size="OffcanvasSize.Large" UseStaticBackdrop="false" BodyCssClass="d-flex flex-column" />

<Offcanvas @ref="EditorOffCanvas" Size="OffcanvasSize.Large" UseStaticBackdrop="false" BodyCssClass="d-flex flex-column" />

<ConfirmDialog @ref="Dialog" />

@{

    string GetStatusClass(WorkflowInstance instance)
    {
        return instance.Status?.Phase switch
        {
            WorkflowInstanceStatusPhase.Pending => "border-secondary text-secondary",
            WorkflowInstanceStatusPhase.Running => "border-primary text-primary",
            WorkflowInstanceStatusPhase.Faulted => "border-danger text-danger",
            WorkflowInstanceStatusPhase.Cancelled => "border-warning text-warning",
            WorkflowInstanceStatusPhase.Completed => "border-success text-success",
            _ => "border-secondary text-secondary"
        };
    }

    
    Task OnShowResourceDetailsAsync(WorkflowInstance workflowInstance)
    {
        if (this.DetailsOffCanvas == null) return Task.CompletedTask;
        var parameters = new Dictionary<string, object>
        {
            { nameof(WorkflowInstanceDetails.WorkflowInstance), workflowInstance }
        };
        return this.DetailsOffCanvas.ShowAsync<WorkflowInstanceDetails>(title: workflowInstance.GetName(), parameters: parameters);
    }

}