@namespace Synapse.Dashboard.Pages.Correlations.List
@page "/correlations"
@inherits NamespacedResourceManagementComponent<Correlation>

<ApplicationTitle>Correlations</ApplicationTitle>

<div class="table-container">
    @if (Loading)
    {
        <div class="loading">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    <table class="table table-striped table-hover">
        <thead>
            <tr>
                <th class="sticky-header text-start">Namespace</th>
                <th class="sticky-header text-start">Name</th>
                <th class="sticky-header text-center">Created At</th>
                <th class="sticky-header text-center">Last Modified</th>
                <th class="sticky-header text-center">Status</th>
                <th class="sticky-header text-center">Consumption Strategy</th>
                <th class="sticky-header text-center">Conditions</th>
                <th class="sticky-header text-center">Outcome Type</th>
                <th class="sticky-header text-center">Outcome Target</th>
                <th class="sticky-header text-center">Contexts</th>
                <th class="sticky-header text-end"></th>
            </tr>
        </thead>
        <tbody>
            @if (Resources != null && Resources.Any())
            {
                <Virtualize Context="resource" Items="@Resources">
                    <tr @onclick="async _ => await OnShowResourceDetailsAsync(resource)" class="cursor-pointer">
                        <td class="text-start">@resource.Metadata.Namespace</td>
                        <td class="text-start">@resource.Metadata.Name</td>
                        <td class="text-center">@resource.Metadata.CreationTimestamp.ToString()</td>
                        <td class="text-center">@resource.Status?.LastModified.ToString()</td>
                        <td class="text-center"><span class="badge rounded-pill border border-@GetStatusClass(resource) text-@GetStatusClass(resource)">@resource.Status?.Phase</span></td>
                        <td class="text-center"><span class="badge rounded-pill border border-secondary text-secondary">@GetEventConsumptionStrategy(resource)</span></td>
                        <td class="text-center">@GetConditionCount(resource)</td>
                        <td class="text-center"><span class="badge rounded-pill border border-secondary text-secondary">@GetOutcomeType(resource)</span></td>
                        <td class="text-center"><a @onclick:preventDefault="true" @onclick:stopPropagation="true" href="@GetOutcomeTargetRef(resource)">@GetOutcomeTarget(resource)</a></td>
                        <td class="text-center">@resource.Status?.Contexts.Count</td>
                        <td class="text-end">
                            <button class="btn btn-outline-primary btn-sm" title="Edit '@resource.Metadata.Name'" @onclick="async _ => await OnShowResourceEditorAsync(resource)" @onclick:preventDefault @onclick:stopPropagation><Icon Name="IconName.Pencil" /></button>
                            <button class="btn btn-outline-danger btn-sm" title="Delete '@resource.Metadata.Name'" @onclick="async _ => await OnDeleteResourceAsync(resource)" @onclick:preventDefault @onclick:stopPropagation><Icon Name="IconName.Trash" /></button>
                        </td>
                    </tr>
                </Virtualize>
            }
        </tbody>
    </table>
</div>

<Button Outline="true" Color="ButtonColor.Primary" @onclick="async _ => await OnShowResourceEditorAsync()"><Icon Name="IconName.Plus" /></Button>

<Offcanvas @ref="DetailsOffCanvas" Size="OffcanvasSize.Large" UseStaticBackdrop="false" BodyCssClass="d-flex flex-column" />

<Offcanvas @ref="EditorOffCanvas" Size="OffcanvasSize.Large" UseStaticBackdrop="false" BodyCssClass="d-flex flex-column" />

<ConfirmDialog @ref="Dialog" />

@{

    string GetStatusClass(Correlation correlation)
    {
        return correlation.Status?.Phase switch
        {
            CorrelationStatusPhase.Active => "primary",
            CorrelationStatusPhase.Cancelled => "warning",
            CorrelationStatusPhase.Completed => "success",
            _ => "secondary"
        };
    }

    string GetEventConsumptionStrategy(Correlation correlation)
    {
        if (correlation.Spec.Events.All != null) return "all";
        else if (correlation.Spec.Events.Any != null) return "any";
        else return "one";
    }

    int GetConditionCount(Correlation correlation)
    {
        if (correlation.Spec.Events.All != null) return correlation.Spec.Events.All.Count;
        else if (correlation.Spec.Events.Any != null) return correlation.Spec.Events.Any.Count;
        else return 1;
    }

    string GetOutcomeType(Correlation correlation)
    {
        if (correlation.Spec.Outcome.Start != null) return "start";
        else return "correlate";
    }

    string GetOutcomeTarget(Correlation correlation)
    {
        if (correlation.Spec.Outcome.Start != null) return correlation.Spec.Outcome.Start.Workflow.ToString();
        else return correlation.Spec.Outcome.Correlate!.Instance;
    }

    string GetOutcomeTargetRef(Correlation correlation)
    {
        if (correlation.Spec.Outcome.Start != null) return $"/workflows/{correlation.Spec.Outcome.Start.Workflow.ToString()}";
        else return $"/workflow-instances/{correlation.Spec.Outcome.Correlate!.Instance}";
    }

}