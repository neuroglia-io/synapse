@page "/correlations"
@attribute [Authorize]
@namespace Synapse.Dashboard.Pages.Correlations.List
@inherits NamespacedResourceManagementComponent<Correlation>

<ApplicationTitle>Correlations</ApplicationTitle>

<div class="table-container">
    @if (Loading)
    {
        <div class="loading">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    <div class="row align-items-center">
        <div class="col-2">
            <h4>Correlations</h4>
        </div>
        <div class="col-6 text-center">
            <span>@(Resources?.Count ?? 0) items</span>
        </div>
        <div class="col-4 d-flex">
            <div class="ms-auto d-flex">
                <select class="form-select m-2" @onchange="OnNamespaceChanged">
                    <option value="">All namespaces</option>
                    @if (Namespaces != null && Namespaces.Count > 0)
                    {
                        foreach (var namespaceResource in Namespaces)
                        {
                            <option value="@namespaceResource.GetName()">@namespaceResource.GetName()</option>
                        }
                    }
                </select>
                <input type="search" class="form-control rounded-end-0 my-2">
                <button class="btn btn-sm btn-outline-secondary rounded-start-0 text-secondary my-2"><i class="bi bi-search"></i></button>
            </div>
        </div>
    </div>
    <hr />
    <table class="table table-striped table-hover">
        <thead>
            <tr>
                <th class="sticky-header text-start">Namespace</th>
                <th class="sticky-header text-start">Name</th>
                <th class="sticky-header text-center">Created At</th>
                <th class="sticky-header text-center">Last Modified</th>
                <th class="sticky-header text-center">Status</th>
                <th class="sticky-header text-center">Lifetime</th>
                <th class="sticky-header text-center">Consumption Strategy</th>
                <th class="sticky-header text-center">Events</th>
                <th class="sticky-header text-center">Outcome Type</th>
                <th class="sticky-header text-center">Outcome Target</th>
                <th class="sticky-header text-center">Contexts</th>
                <th class="sticky-header text-end"></th>
            </tr>
        </thead>
        <tbody>
            @if (Resources != null && Resources.Any())
            {
                <Virtualize Context="correlation" Items="@Resources">
                    <tr @onclick="async _ => await OnShowResourceDetailsAsync(correlation)" class="cursor-pointer">
                        <td class="text-start" title="The namespace the correlation belongs to">@correlation.Metadata.Namespace</td>
                        <td class="text-start" title="The correlation's name">@correlation.Metadata.Name</td>
                        <td class="text-center" title="The date and time at which the correlation has been created">@correlation.Metadata.CreationTimestamp.ToString()</td>
                        <td class="text-center" title="The date and time at which the correlation was last modified">@correlation.Status?.LastModified.ToString()</td>
                        <td class="text-center" title="@GetStatusPhaseTitle(correlation.Status?.Phase)"><span class="badge rounded-pill border border-@GetStatusPhaseClass(correlation) text-@GetStatusPhaseClass(correlation)">@correlation.Status?.Phase</span></td>
                        <td class="text-center" title="@GetLifetimeTitle(correlation.Spec.Lifetime)"><span class="badge rounded-pill border border-secondary text-secondary">@correlation.Spec.Lifetime</span></td>
                        <td class="text-center" title="@GetEventConsumptionStrategyTitle(correlation)"><span class="badge rounded-pill border border-secondary text-secondary">@GetEventConsumptionStrategy(correlation)</span></td>
                        <td class="text-center" title="The number of event filters defined by the correlation">@GetFilterCount(correlation)</td>
                        <td class="text-center" title="@GetOutcomeTypeTitle(correlation)"><span class="badge rounded-pill border border-secondary text-secondary">@GetOutcomeType(correlation)</span></td>
                        <td class="text-center" title="@GetOutcomeTargetTitle(correlation)"><a @onclick:preventDefault="true" @onclick:stopPropagation="true" href="@GetOutcomeTargetRef(correlation)">@GetOutcomeTarget(correlation)</a></td>
                        <td class="text-center" title="The amount of active correlation contexts">@correlation.Status?.Contexts.Count</td>
                        <td class="text-end">
                            <button class="btn btn-outline-primary btn-sm" title="Edit '@correlation.Metadata.Name'" @onclick="async _ => await OnShowResourceEditorAsync(correlation)" @onclick:preventDefault @onclick:stopPropagation><Icon Name="IconName.Pencil" /></button>
                            <button class="btn btn-outline-danger btn-sm" title="Delete '@correlation.Metadata.Name'" @onclick="async _ => await OnDeleteResourceAsync(correlation)" @onclick:preventDefault @onclick:stopPropagation><Icon Name="IconName.Trash" /></button>
                        </td>
                    </tr>
                </Virtualize>
            }
        </tbody>
    </table>
</div>

<Button Outline="true" Color="ButtonColor.Primary" @onclick="async _ => await OnShowResourceEditorAsync()"><Icon Name="IconName.Plus" /></Button>

<Offcanvas @ref="DetailsOffCanvas" Size="OffcanvasSize.Large" UseStaticBackdrop="false" BodyCssClass="d-flex flex-column" />

<Offcanvas @ref="EditorOffCanvas" Size="OffcanvasSize.Large" UseStaticBackdrop="false" BodyCssClass="d-flex flex-column" />

<ConfirmDialog @ref="Dialog" />

@{

    string GetStatusPhaseTitle(string? phase)
    {
        return phase switch
        {
            CorrelationStatusPhase.Active => "The correlation has been picked up by a correlator and is actively correlation ingested events",
            CorrelationStatusPhase.Inactive => "The correlation is inactive and is not correlating events",
            CorrelationStatusPhase.Cancelled => "The correlation has been cancelled",
            CorrelationStatusPhase.Completed => "The correlation has been completed",
            _ => "Unknown/unsupported status phase"
        };
    }

    string GetLifetimeTitle(string lifetime)
    {
        return lifetime switch
        {
            CorrelationLifetime.Durable => "A durable, multi-use correlation",
            CorrelationLifetime.Ephemeral => "A single use correlation",
            _ => "Unknown/unsupported correlation lifetime"
        };
    }

    string GetEventConsumptionStrategyTitle(Correlation correlation)
    {
        if (correlation.Spec.Events.All != null) return "Consumes all the defined events";
        else if (correlation.Spec.Events.Any != null) return "Consumes any of the defined events";
        else return "Consumes a single event";
    }

    string GetOutcomeTypeTitle(Correlation correlation)
    {
        if (correlation.Spec.Outcome.Start != null) return "Starts a new instance workflow of the specified workflow";
        else return "Correlate ingested events to a specific workflow instance";
    }

    string GetOutcomeTargetTitle(Correlation correlation)
    {
        if (correlation.Spec.Outcome.Start != null) return "The qualified name of the workflow to start";
        else return "The qualified name of the workflow instance to correlate events to";
    }

    string GetStatusPhaseClass(Correlation correlation)
    {
        return correlation.Status?.Phase switch
        {
            CorrelationStatusPhase.Active => "primary",
            CorrelationStatusPhase.Cancelled => "warning",
            CorrelationStatusPhase.Completed => "success",
            _ => "secondary"
        };
    }

    string GetEventConsumptionStrategy(Correlation correlation)
    {
        if (correlation.Spec.Events.All != null) return "all";
        else if (correlation.Spec.Events.Any != null) return "any";
        else return "one";
    }

    int GetFilterCount(Correlation correlation)
    {
        if (correlation.Spec.Events.All != null) return correlation.Spec.Events.All.Count;
        else if (correlation.Spec.Events.Any != null) return correlation.Spec.Events.Any.Count;
        else return 1;
    }

    string GetOutcomeType(Correlation correlation)
    {
        if (correlation.Spec.Outcome.Start != null) return "start";
        else return "correlate";
    }

    string GetOutcomeTarget(Correlation correlation)
    {
        if (correlation.Spec.Outcome.Start != null) return correlation.Spec.Outcome.Start.Workflow.ToString();
        else return correlation.Spec.Outcome.Correlate!.Instance;
    }

    string GetOutcomeTargetRef(Correlation correlation)
    {
        if (correlation.Spec.Outcome.Start != null) return $"/workflows/{correlation.Spec.Outcome.Start.Workflow.ToString()}";
        else return $"/workflow-instances/{correlation.Spec.Outcome.Correlate!.Instance}";
    }

    async Task OnNamespaceChanged(ChangeEventArgs e)
    {
        await this.Store.ListResourcesAsync(e.Value?.ToString(), null); //todo: add label selectors
    }

}